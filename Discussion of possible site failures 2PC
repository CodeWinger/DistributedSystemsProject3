FIXED = query {flight,car,room,customerinfo} should be 1000 and no bill  for cases 1,2,3,4,10
		query {flight,car,room,customerinfo} should be  999 and 1 flight/car/room reserved for bill for cases 6,7,8,9

• At the TM (coordinator):
	1 Crash before sending vote request
		state of RM is corrupted (middleware called executeCmds), changes were made to them and they have not been reverted. Another transaction 
		preparing (and committing) would make these corrupt changes persistent. Similarly for customers in the middleware (NEED SOLUTION TO FIX THIS)

			FIXED!
	
	2 Crash after sending vote request and before receiving any replies
		same as above, corrupt states are maintained in main memory, a new prepared transaction would write these changes to disk
		and customers in the middleware

			FIXED!

	3 Crash after receiving some replies but not all
		won't return any decisions to RM's, same problem as above with corrupt 

			FIXED!

	4 Crash after receiving all replies but before deciding
		won't return any decisions to RM's, same problem as above with corrupt data

			FIXED!

	5 Crash after deciding but before sending decision
		won't return any decisions to RM's, same problem as above with corrupt data, 

			FIXED!

	6 Crash after sending some but not all decisions 
		Data is correct and incorect in different servers. Yes votes from RM having not received 
		a decision from coordinator are allowed to wait by assumption 2) No votes from RM automatically
		abort and have to handle rollbacks (same problem as cases 1,2,3,4 above)

		FIXED (required lots of time to fix, needs thorough testing and major refactoring later on ) (RETEST 1,2,3,4,5)
		
	7 Crash after having sent all decisions
		changes are persistent on all machines (if we include middleware and if it is allowed), integrity is maintained

		FIXED

• At the RMs (participants)

	8 Crash after receive vote request but before sending answer
		No changes are persistent for crashed RM => fine. 
		Other RM's, corrupt data similar to cases 1,2,3 above
		middleware should call abort on other RM's
		other RM's should rollback changes from middleware

		FIXED!

	9 Which answer to send (commit/abort)
		abort call from one RM forces other RM's to abort
		all RM's and middleware have corrupt data, need rollback similar to cases 1,2,3 above

		FIXED!

	10 Crash after sending answer
		all machines except the crashed RM have correct data. Need feature to ask middleware coordinator if
		given transaction x has committed, if so, make masterpointer point to shadow file

		FIXED

	11 Crash after receiving decision but before committing/aborting
		same as 10

	12 Recovery of RM; especially if it voted yes for a transaction but has not yet committed it.
		feature that can be omitted since we can simulate it by hand?

			CURRENTLY NOT IMPLEMENTED

Things to do :

 -> rollback operations in abort protocol for RM's to replace the hashtable of items as it was originally
 	-> other possibility : shallow copy of current hashtable of RM for each transaction, when executing Cmds from middleware,
 		add them to copied hastable, after receiving prepare, write copied hashtable to disk, when commit, set new hashtable of
 		server to the copied version, change master pointer to shadow file COMPLETED

 -> implement timeouts for sending/receiving decisions from middleware to automatically abort if we pass a waiting threshold (like case 2,3,4)
 	COMPLETED

 -> handle incorrect timeouts, see c) below
 -> add transaction-based shadowing technique for writing to disk, keep in memory latest commmitted transaction of a given shadow/master file
 -> code procedure for RM to query middleware to get latest transaction committed and handle cases appropriately (yes -> change pointer, no -> do nothing) (ask Yousuf)
 
 Not related :
 -> add try/catch block for forcing shutdowns of servers for every call made by the middleware to the servers similar to the client's solution
 	DONE

c) Note that your implementation should also be able to handle incorrect timeouts. For instance, a
participant times out while waiting for the VOTE-REQUEST and hence aborts the transaction,
but then receives the VOTE-REQUEST from the coordinator. That is, each site should be able
to handle requests it does not expect

Assumptions:

1) only 1 transaction may be in the prepared state
2) participant voted yes and coordinator crashed, we allow indefinite wait for yes respondents
3) only 1 middleware and no-one can communicate with flight, car and room server alone. Only 1 coordinator allowed
4) cannot commit same transaction twice (start,1 -> ... -> commit,1 -> start,1 -> ... -> commit,1)

Ask Yousuf:
	RM to query middleware to get latest transaction committed, need to implement this? (2 way communication now). Any other way?
	need to implement 12?
	ask about assumptions


	Things to do:

	-customers hashtable copied for each transaction
	-make sure normal commit and commit with crash (and similar methods have same implementation)